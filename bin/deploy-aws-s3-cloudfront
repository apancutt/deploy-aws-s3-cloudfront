#!/usr/bin/env node
/**
 * Copyright (c) 2018-present, Adam Pancutt
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 */

const options = require('../src/options').argv;

const changeset = require('../src/changeset');
const cloudFront = require('../src/cloudFront')();
const createLogger = require('../src/createLogger');
const deploy = require('../src/deploy');
const deployConfirmation = require('../src/deployConfirmation');
const invalidate = require('../src/invalidate');
const invalidateConfirmation = require('../src/invalidateConfirmation');
const s3 = require('../src/s3')();
const installSoftDelete = require('../src/installSoftDelete');
const stale = require('../src/stale');
const summarize = require('../src/summarize');

const logger = createLogger(options.outputFormat, options.debug);

Promise.resolve(((command, options) => {
  switch (command) {

    case 'install-soft-delete':
      return installSoftDelete(logger, s3, options);

    default:
      return changeset(logger, s3, options)
        .then(({ added, deleted, modified, unchanged }) => deployConfirmation(logger, added, modified, deleted, unchanged, options))
        .then(({ added, deleted, modified, unchanged }) => deploy(logger, s3, added, modified, deleted, unchanged, options))
        .then(({ added, deleted, modified }) => (
          stale(modified, deleted, options)
            .then((stale) => invalidateConfirmation(logger, stale, options))
            .then((stale) => invalidate(logger, cloudFront, stale, options))
            .then((invalidated) => ({ added, deleted, invalidated, modified }))
        ))
        .then(({ added, deleted, invalidated, modified }) => summarize(logger, added, modified, deleted, invalidated, options))

  }
}) (options._.shift(), options)).catch(({ message, ...rest }) => {
  logger.error(message, rest);
  process.exitCode = 1;
});
